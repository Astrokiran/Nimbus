//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Consultant = newConsultantTable("public", "consultant", "")

type consultantTable struct {
	postgres.Table

	// Columns
	ConsultantID     postgres.ColumnString
	UserID           postgres.ColumnString
	Expertise        postgres.ColumnString
	State            postgres.ColumnString
	Version          postgres.ColumnInteger
	ChatChannel      postgres.ColumnString
	CallChannel      postgres.ColumnString
	LiveChannel      postgres.ColumnString
	VideoCallChannel postgres.ColumnString
	CreatedAt        postgres.ColumnTimestamp
	UpdatedAt        postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ConsultantTable struct {
	consultantTable

	EXCLUDED consultantTable
}

// AS creates new ConsultantTable with assigned alias
func (a ConsultantTable) AS(alias string) *ConsultantTable {
	return newConsultantTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ConsultantTable with assigned schema name
func (a ConsultantTable) FromSchema(schemaName string) *ConsultantTable {
	return newConsultantTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ConsultantTable with assigned table prefix
func (a ConsultantTable) WithPrefix(prefix string) *ConsultantTable {
	return newConsultantTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ConsultantTable with assigned table suffix
func (a ConsultantTable) WithSuffix(suffix string) *ConsultantTable {
	return newConsultantTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newConsultantTable(schemaName, tableName, alias string) *ConsultantTable {
	return &ConsultantTable{
		consultantTable: newConsultantTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newConsultantTableImpl("", "excluded", ""),
	}
}

func newConsultantTableImpl(schemaName, tableName, alias string) consultantTable {
	var (
		ConsultantIDColumn     = postgres.StringColumn("consultant_id")
		UserIDColumn           = postgres.StringColumn("user_id")
		ExpertiseColumn        = postgres.StringColumn("expertise")
		StateColumn            = postgres.StringColumn("state")
		VersionColumn          = postgres.IntegerColumn("version")
		ChatChannelColumn      = postgres.StringColumn("chat_channel")
		CallChannelColumn      = postgres.StringColumn("call_channel")
		LiveChannelColumn      = postgres.StringColumn("live_channel")
		VideoCallChannelColumn = postgres.StringColumn("video_call_channel")
		CreatedAtColumn        = postgres.TimestampColumn("created_at")
		UpdatedAtColumn        = postgres.TimestampColumn("updated_at")
		allColumns             = postgres.ColumnList{ConsultantIDColumn, UserIDColumn, ExpertiseColumn, StateColumn, VersionColumn, ChatChannelColumn, CallChannelColumn, LiveChannelColumn, VideoCallChannelColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns         = postgres.ColumnList{UserIDColumn, ExpertiseColumn, StateColumn, VersionColumn, ChatChannelColumn, CallChannelColumn, LiveChannelColumn, VideoCallChannelColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return consultantTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ConsultantID:     ConsultantIDColumn,
		UserID:           UserIDColumn,
		Expertise:        ExpertiseColumn,
		State:            StateColumn,
		Version:          VersionColumn,
		ChatChannel:      ChatChannelColumn,
		CallChannel:      CallChannelColumn,
		LiveChannel:      LiveChannelColumn,
		VideoCallChannel: VideoCallChannelColumn,
		CreatedAt:        CreatedAtColumn,
		UpdatedAt:        UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
