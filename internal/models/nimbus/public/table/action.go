//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Action = newActionTable("public", "action", "")

type actionTable struct {
	postgres.Table

	// Columns
	ActionID          postgres.ColumnInteger
	ActionName        postgres.ColumnString
	ActionCode        postgres.ColumnString
	ActionDescription postgres.ColumnString
	PermissionID      postgres.ColumnInteger
	Version           postgres.ColumnInteger
	CreatedAt         postgres.ColumnTimestamp
	UpdatedAt         postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ActionTable struct {
	actionTable

	EXCLUDED actionTable
}

// AS creates new ActionTable with assigned alias
func (a ActionTable) AS(alias string) *ActionTable {
	return newActionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ActionTable with assigned schema name
func (a ActionTable) FromSchema(schemaName string) *ActionTable {
	return newActionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ActionTable with assigned table prefix
func (a ActionTable) WithPrefix(prefix string) *ActionTable {
	return newActionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ActionTable with assigned table suffix
func (a ActionTable) WithSuffix(suffix string) *ActionTable {
	return newActionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newActionTable(schemaName, tableName, alias string) *ActionTable {
	return &ActionTable{
		actionTable: newActionTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newActionTableImpl("", "excluded", ""),
	}
}

func newActionTableImpl(schemaName, tableName, alias string) actionTable {
	var (
		ActionIDColumn          = postgres.IntegerColumn("action_id")
		ActionNameColumn        = postgres.StringColumn("action_name")
		ActionCodeColumn        = postgres.StringColumn("action_code")
		ActionDescriptionColumn = postgres.StringColumn("action_description")
		PermissionIDColumn      = postgres.IntegerColumn("permission_id")
		VersionColumn           = postgres.IntegerColumn("version")
		CreatedAtColumn         = postgres.TimestampColumn("created_at")
		UpdatedAtColumn         = postgres.TimestampColumn("updated_at")
		allColumns              = postgres.ColumnList{ActionIDColumn, ActionNameColumn, ActionCodeColumn, ActionDescriptionColumn, PermissionIDColumn, VersionColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns          = postgres.ColumnList{ActionNameColumn, ActionCodeColumn, ActionDescriptionColumn, PermissionIDColumn, VersionColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return actionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ActionID:          ActionIDColumn,
		ActionName:        ActionNameColumn,
		ActionCode:        ActionCodeColumn,
		ActionDescription: ActionDescriptionColumn,
		PermissionID:      PermissionIDColumn,
		Version:           VersionColumn,
		CreatedAt:         CreatedAtColumn,
		UpdatedAt:         UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
