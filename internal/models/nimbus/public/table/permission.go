//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Permission = newPermissionTable("public", "permission", "")

type permissionTable struct {
	postgres.Table

	// Columns
	PermissionID          postgres.ColumnInteger
	PermissionName        postgres.ColumnString
	PermissionDescription postgres.ColumnString
	RoleID                postgres.ColumnInteger
	Version               postgres.ColumnInteger
	CreatedAt             postgres.ColumnTimestamp
	UpdatedAt             postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PermissionTable struct {
	permissionTable

	EXCLUDED permissionTable
}

// AS creates new PermissionTable with assigned alias
func (a PermissionTable) AS(alias string) *PermissionTable {
	return newPermissionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PermissionTable with assigned schema name
func (a PermissionTable) FromSchema(schemaName string) *PermissionTable {
	return newPermissionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PermissionTable with assigned table prefix
func (a PermissionTable) WithPrefix(prefix string) *PermissionTable {
	return newPermissionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PermissionTable with assigned table suffix
func (a PermissionTable) WithSuffix(suffix string) *PermissionTable {
	return newPermissionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPermissionTable(schemaName, tableName, alias string) *PermissionTable {
	return &PermissionTable{
		permissionTable: newPermissionTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newPermissionTableImpl("", "excluded", ""),
	}
}

func newPermissionTableImpl(schemaName, tableName, alias string) permissionTable {
	var (
		PermissionIDColumn          = postgres.IntegerColumn("permission_id")
		PermissionNameColumn        = postgres.StringColumn("permission_name")
		PermissionDescriptionColumn = postgres.StringColumn("permission_description")
		RoleIDColumn                = postgres.IntegerColumn("role_id")
		VersionColumn               = postgres.IntegerColumn("version")
		CreatedAtColumn             = postgres.TimestampColumn("created_at")
		UpdatedAtColumn             = postgres.TimestampColumn("updated_at")
		allColumns                  = postgres.ColumnList{PermissionIDColumn, PermissionNameColumn, PermissionDescriptionColumn, RoleIDColumn, VersionColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns              = postgres.ColumnList{PermissionNameColumn, PermissionDescriptionColumn, RoleIDColumn, VersionColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return permissionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		PermissionID:          PermissionIDColumn,
		PermissionName:        PermissionNameColumn,
		PermissionDescription: PermissionDescriptionColumn,
		RoleID:                RoleIDColumn,
		Version:               VersionColumn,
		CreatedAt:             CreatedAtColumn,
		UpdatedAt:             UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
